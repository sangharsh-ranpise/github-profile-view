{"version":3,"sources":["component/git-hub-profile-list/github-profile.jsx","component/git-hub-page/github-page.jsx","App.jsx","serviceWorker.js","index.js"],"names":["displayIndex","GitHubProfile","props","state","gitHubUsers","extraDetails","loading","this","fetchGitHubData","prevProps","gitHubUserName","setState","axios","get","result","data","items","event","i","console","log","fetchExtraDetailUser","gitHubUser","map","user","className","key","src","avatar_url","login","html_url","score","class","length","assignees_url","onClick","getExtraDetails","React","Component","_","require","GitHubPage","userName","userNameToSend","handleChange","bind","handleSubmit","updateUrl","debounce","target","value","preventDefault","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOASIA,E,mJAsEWC,E,YApEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,YAAa,GACbC,aAAc,GACdC,SAAS,GALE,E,iFAUfC,KAAKC,oB,yCAGUC,GACXA,EAAUC,iBAAmBH,KAAKL,MAAMQ,iBACxCH,KAAKI,SAAS,CAAEL,SAAS,IACzBC,KAAKC,gBAAgBD,KAAKL,MAAMQ,eAAiBH,KAAKL,MAAMQ,eAAiB,Q,mFAI1DA,G,sFACFE,IAAMC,IAAI,gCAAkCH,EAAiB,U,cAA5EI,E,yBACCA,G,2QAGWJ,E,+BAAiB,I,kBAEVE,IAAMC,IAAN,gDAAmDH,I,OAAlEI,E,OACNP,KAAKI,SAAS,CAAEP,YAAaU,EAAOC,KAAKC,MAAOV,SAAS,I,sPAQ3CW,EAAOC,G,6EACzBlB,EAAekB,EACfC,QAAQC,IAAIpB,G,SAESO,KAAKc,qBAAqBJ,G,OAAzCH,E,OACNP,KAAKI,SAAS,CAAEN,aAAcS,EAAOC,KAAMT,SAAS,IACpDa,QAAQC,IAAIb,KAAKJ,MAAME,c,sIAEjB,IAAD,OACDiB,EAAaf,KAAKJ,MAAMC,YAAYmB,IAAI,SAACC,EAAMN,GAAP,OACxC,yBAAKO,UAAU,eAAeC,IAAKR,GAC/B,6BAAK,yBAAKO,UAAU,cAAcE,IAAKH,EAAKI,cAE5C,yBAAKH,UAAU,gBACX,yBAAKA,UAAU,IAAID,EAAKK,OACxB,yBAAKJ,UAAU,IAAID,EAAKM,UACxB,yBAAKL,UAAU,IAAID,EAAKO,OACxB,yBAAKC,MAAM,iBAAiBhC,IAAiBkB,GAAK,EAAKf,MAAME,aAAa4B,OAA9C,uCAAuF,EAAK9B,MAAME,aAAa,GAAG6B,eAAkB,KAEpK,yBAAKT,UAAU,iBACX,4BAAQA,UAAU,oBAAoBU,QAAS,kBAAM,EAAKC,gBAAgBZ,EAAKK,MAAOX,KAAtF,iBAIZ,OACI,6BACKI,O,GA/DWe,IAAMC,WCP5BC,EAAIC,EAAQ,IAsDHC,E,YAlDX,WAAYvC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEuC,SAAU,GAAIC,eAAgB,IAE7C,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBACjB,EAAKE,UAAYR,EAAES,SAAS,EAAKD,UAAW,KAP7B,E,0EAWN9B,GACTV,KAAKI,SAAS,CAAE+B,SAAUzB,EAAMgC,OAAOC,QACvC3C,KAAKwC,c,kCAILxC,KAAKI,SAAS,CACVgC,eAAgBpC,KAAKJ,MAAMuC,a,mCAItBzB,GAETA,EAAMkC,mB,+BAKN,OACI,6BACI,qDACA,yBAAK1B,UAAU,0BAGX,yBAAKA,UAAU,oBAAf,eAGA,2BAAOA,UAAU,gBAAgB2B,KAAK,OAAOF,MAAO3C,KAAKJ,MAAMuC,SAAUW,SAAU9C,KAAKqC,eAGxF,yBAAKnB,UAAU,qBACX,kBAAC,EAAD,CAAef,eAAgBH,KAAKJ,MAAMwC,wB,GA3CzCN,IAAMC,WCuBhBgB,E,iLANX,OACE,kBAAC,EAAD,U,GApBYjB,IAAMC,WCQJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.83f2f96f.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport './github-profile.css';\r\n\r\n\r\nimport axios from 'axios';\r\nimport LoadingSpinner from '../loadingSpinner';\r\n\r\n\r\nlet displayIndex;\r\nclass GitHubProfile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gitHubUsers: [],\r\n            extraDetails: '',\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchGitHubData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.gitHubUserName !== this.props.gitHubUserName) {\r\n            this.setState({ loading: true })\r\n            this.fetchGitHubData(this.props.gitHubUserName ? this.props.gitHubUserName : 'a');\r\n\r\n        }\r\n    }\r\n    async fetchExtraDetailUser(gitHubUserName) {\r\n        const result = await axios.get(\"https://api.github.com/users/\" + gitHubUserName + \"/repos\");\r\n        return result;\r\n    }\r\n\r\n    async fetchGitHubData(gitHubUserName = 'a') {\r\n        try {\r\n            const result = await axios.get(`https://api.github.com/search/users?q=${gitHubUserName}`)\r\n            this.setState({ gitHubUsers: result.data.items, loading: false })\r\n\r\n            // console.log(result.data.items)\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getExtraDetails(event, i) {\r\n        displayIndex = i;\r\n        console.log(displayIndex);\r\n\r\n        const result = await this.fetchExtraDetailUser(event);\r\n        this.setState({ extraDetails: result.data, loading: false })\r\n        console.log(this.state.extraDetails);\r\n    }\r\n    render() {\r\n        let gitHubUser = this.state.gitHubUsers.map((user, i) =>\r\n            <div className=\"display-card\" key={i}>\r\n                <div><img className=\"profile-pic\" src={user.avatar_url} />\r\n                </div>\r\n                <div className='user-details'>\r\n                    <div className=''>{user.login}</div>\r\n                    <div className=''>{user.html_url}</div>\r\n                    <div className=''>{user.score}</div>\r\n                    <div class='assignees-url'>{displayIndex === i && this.state.extraDetails.length ? `Assignees url at 0th index : ${this.state.extraDetails[0].assignees_url}` : ''}</div>\r\n                </div>\r\n                <div className='extra-details'>\r\n                    <button className='extra-details-btn' onClick={() => this.getExtraDetails(user.login, i)}>Show more</button>\r\n                </div>\r\n            </div>\r\n        )\r\n        return (\r\n            <div>\r\n                {gitHubUser}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GitHubProfile;\r\n","import React from 'react';\r\nimport './github-page.css';\r\nimport GitHubProfile from '../git-hub-profile-list/github-profile';\r\nconst _ = require('lodash');\r\n\r\n\r\nclass GitHubPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { userName: '', userNameToSend: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.updateUrl = this.updateUrl.bind(this);\r\n        this.updateUrl = _.debounce(this.updateUrl, 500);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ userName: event.target.value });\r\n        this.updateUrl();\r\n    }\r\n\r\n    updateUrl() {\r\n        this.setState({\r\n            userNameToSend: this.state.userName\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        // alert('A name was submitted: ' + this.state.userName);\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>GitHub Profile Viewer</h1>\r\n                <div className='profile-view-container'>\r\n                    {/* <form onSubmit={this.handleSubmit}> */}\r\n\r\n                    <div className='search-user-name'>\r\n                        GitHub Name\r\n                        </div>\r\n                    <input className=\"user-text-box\" type=\"text\" value={this.state.userName} onChange={this.handleChange} />\r\n                    {/* <input type=\"submit\" value=\"Submit\" />\r\n                    </form> */}\r\n                    <div className='profile-view-list'>\r\n                        <GitHubProfile gitHubUserName={this.state.userNameToSend}></GitHubProfile>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GitHubPage;\r\n","import React from 'react';\nimport './App.css';\nimport GitHubPage from './component/git-hub-page/github-page';\n\nclass App extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = { userName: '' };\n\n  //   this.handleChange = this.handleChange.bind(this);\n  //   this.handleSubmit = this.handleSubmit.bind(this);\n  // }\n\n  // handleChange(event) {\n  //   this.setState({ userName: event.target.value });\n  // }\n\n  // handleSubmit(event) {\n  //   // alert('A name was submitted: ' + this.state.userName);\n  //   event.preventDefault();\n  // }\n\n  render() {\n    return (\n      <GitHubPage></GitHubPage>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}